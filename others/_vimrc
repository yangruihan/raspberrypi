set nocompatible 

set rtp+=C:\Users\YRH\Desktop\Vim\vimfiles\bundle\vundle
call vundle#rc()

Bundle 'gmarik/vundle'

" my personal settings
if has("syntax")
  syntax on " 语法高亮
endif
" colorscheme slate

filetype on
filetype plugin on

set background=dark

if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
  filetype plugin indent on
endif

set ignorecase
set smartcase
set autowrite
set autoindent
set smartindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set cindent
set cinoptions={0,1s,t0,n-2,p2s,(03s,=.5s,>1s,=1s,:1s
set showmatch
set linebreak
set whichwrap=b,s,<,>,[,]
set mouse=a
set number
set history=100

set laststatus=2
set ruler

set showcmd
set showmode

set incsearch
set hlsearch

set bsdir=buffer
set autochdir

set encoding=utf-8
lang messages zh_CN.UTF-8

source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

set fileencodings=cp936,utf-8,ucs-bom.latin1
set fileencoding=utf-8
let &termencoding=&encoding

set nobackup
set gdefault

au BufNewFile,BufRead *.less set filetype=css
au BufNewFile,BufRead *.phtml set filetype=php
au BufRead,BufNewFile *.js set ft=javascript.jquery

let g:neocomplcache_enalbe_at_startup=1

set bsdir=buffer
set autochdir

"以下为解决中文显示问题,以及相应带来的提示及菜单乱码问题
set encoding=utf-8 " 设置vim内部使用的字符编码,原来是cp936  
lang messages zh_CN.UTF-8 " 解决consle输出乱码   
"解决菜单乱码   
source $VIMRUNTIME/delmenu.vim   
source $VIMRUNTIME/menu.vim 

set fileencodings=cp936,utf-8,ucs-bom,latin1
set fileencoding=utf-8
let &termencoding=&encoding

set guifont=Droid\ Sans\ Mono:h12:cANSI
set guifontwide=Microsoft\ YaHei\ Mono:h12

set nobackup

set ignorecase 

set incsearch
set hlsearch

set gdefault

"--状态行设置--
set laststatus=2 " 总显示最后一个窗口的状态行；设为1则窗口数多于一个的时候显示最后一个窗口的状态行；0不显示最后一个窗口的状态行
set ruler            " 标尺，用于显示光标位置的行号和列号，逗号分隔。每个窗口都有自己的标尺。如果窗口有状态行，标尺在那里显示。否则，它显示在屏幕的最后一行上。

set shiftwidth=4
set tabstop=4
set softtabstop=4     " 设置软制表符的宽度 

set cindent            " 使用 C/C++ 语言的自动缩进方式
set cinoptions={0,1s,t0,n-2,p2s,(03s,=.5s,>1s,=1s,:1s     "设置C/C++语言的具体缩进方式

set showmatch        " 设置匹配模式，显示匹配的括号
set linebreak        " 整词换行
set whichwrap=b,s,<,>,[,] " 光标从行首和行末时可以跳到另一行去

set previewwindow    " 标识预览窗口
set history=50        " set command history to 50    "历史记录50条

set mouse=a            " Enable mouse usage (all modes)    "使用鼠标

set expandtab

set clipboard+=unnamed

autocmd! bufwritepost _vimrc source $VIM/_vimrc

if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
  "have Vim load indentation rules and plugins according to the detected filetype
  filetype plugin indent on
endif

set smartcase        " 如果搜索模式包含大写字符，不使用 'ignorecase' 

set autowrite        " 自动把内容写回文件: 如果文件被修改过，在每个 :next、:rewind、:last、:first、:previous、:stop、:suspend、:tag、:!、:make、CTRL-] 和 CTRL-^命令时进行；用 :buffer、CTRL-O、CTRL-I、'{A-Z0-9} 或 `{A-Z0-9} 命令转到别的文件时亦然。

"自定义关联文件类型
au BufNewFile,BufRead *.less set filetype=css
au BufNewFile,BufRead *.phtml set filetype=php
au BufRead,BufNewFile *.js set ft=javascript.jquery

"---NeoComplCache 启动
let g:neocomplcache_enable_at_startup = 1 

let Tlist_Ctags_Cmd = 'C:\Ctags'

if has("syntax")
  syntax on            " 语法高亮
endif
colorscheme slate        " elflord ron peachpuff default 

set background=dark

set autoindent        " 设置自动对齐(缩进)：即每行的缩进值与上一行相等；使用 noautoindent 取消设置
set smartindent        " 智能对齐方式

"--命令行设置--
set showcmd            " 命令行显示输入的命令
set showmode        " 命令行显示vim当前模式

Bundle 'JavaScript-syntax'
Bundle 'jQuery'
Bundle 'othree/html5.vim'
Bundle 'groenewege/vim-less'
Bundle 'Markdown'
Bundle 'Markdown-syntax'
Bundle 'php.vim-html-enhanced'
Bundle 'Shougo/neocomplcache'
Bundle "MarcWeber/vim-addon-mw-utils"
Bundle "tomtom/tlib_vim"
Bundle "snipmate-snippets"
Bundle "garbas/vim-snipmate"
Bundle 'EasyMotion'
Bundle 'ack.vim'
"Bundle 'calendar-vim'
Bundle 'ctrlp.vim'
Bundle 'colorselector'
Bundle 'tabular'
Bundle 'tpope/vim-fugitive'
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'tpope/vim-rails.git'
Bundle 'L9'
Bundle 'Mark'
"Bundle 'taglist.vim'
Bundle 'The-NERD-tree'
Bundle 'matchit.zip'
Bundle 'AutoComplPop'
"Bundle 'a.vim'
Bundle 'Align'
"Bundle 'jiangmain/auto-pairs'
Bundle 'ccvext.vim'
Bundle 'bufexplorer.zip'
Bundle 'cSyntaxAfter'


" 能够漂亮地显示.NFO文件
set encoding=utf-8
function! SetFileEncodings(encodings)
let b:myfileencodingsbak=&fileencodings
let &fileencodings=a:encodings
endfunction
function! RestoreFileEncodings()
let &fileencodings=b:myfileencodingsbak
unlet b:myfileencodingsbak
endfunction
au BufReadPre *.nfo call SetFileEncodings('cp437')|set ambiwidth=single
au BufReadPost *.nfo call RestoreFileEncodings()

" F5编译和运行C程序，F6编译和运行C++程序
" C的编译和运行
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
exec "w"
exec "!gcc -Wall % -o %<"
exec "! ./%<"
endfunc

" C++的编译和运行
map <F6> :call CompileRunGpp()<CR>
func! CompileRunGpp()
exec "w"
exec "!g++ -Wall % -o %<"
exec "! ./%<"
endfunc

" Gvim标签定制
set guitablabel=%{ShortTabLabel()}
function ShortTabLabel ()
let bufnrlist = tabpagebuflist (v:lnum)
let label = bufname (bufnrlist[tabpagewinnr (v:lnum) -1])
let filename = fnamemodify (label, ':t')
return filename
endfunction

" ######### 一键保存和编译 ######### "
 "编译C源文件
func! CompileGcc()
exec "w"
let compilecmd="!gcc -Wall -std=c99 "
let compileflag="-o %<"
exec compilecmd." % ".compileflag
endfunc

" 编译C++源文件
func! CompileCpp()
exec "w"
let compilecmd="!g++ -Wall "
let compileflag="-o %<"
exec compilecmd." % ".compileflag
endfunc

" 编译&链接Go源文件
func! CompileGo()
exec "w"
exec "!8g %"
exec "!8l -o %<.exe %<.8"
endfunc

" 编译Haskell源文件
func! CompileHaskell()
exec "w"
let compilecmd="!ghc --make "
let compileflag="-o %<"
exec compilecmd." % ".compileflag
endfunc

" 编译Java源文件
func! CompileJava()
exec "w"
exec "!javac %"
endfunc

" 编译C#源文件
func! CompileCs()
exec "w"
exec "!csc %"
endfunc

" 编译Gas源文件
func! CompileGas()
exec "w"
exec "!gcc -Wall -ggdb -o %< %"
endfunc

" 运行Shell源文件
func! RunShell()
exec "w"
exec "!sh %"
endfunc

" 运行Lua源文件
func! RunLua()
exec "w"
exec "!lua %"
endfunc

" 运行Perl源文件
func! RunPerl()
exec "w"
exec "!perl %"
endfunc

" 运行Python源文件
func! RunPython()
exec "w"
exec "!python %"
endfunc

" 运行Ruby源文件
func! RunRuby()
exec "w"
exec "!ruby %"
endfunc

" 根据文件类型自动选择相应的编译函数
func! CompileCode()
exec "w"
if &filetype == "c"
exec "call CompileGcc()"
elseif &filetype == "cpp"
exec "call CompileCpp()"
elseif &filetype == "go"
exec "call CompileGo()"
elseif &filetype == "haskell"
exec "call CompileHaskell()"
elseif &filetype == "java"
exec "call CompileJava()"
elseif &filetype == "cs"
exec "call CompileCs()"
elseif &filetype == "asm"
exec "call CompileGas()"
elseif &filetype == "sh"
exec "call RunShell()"
elseif &filetype == "lua"
exec "call RunLua()"
elseif &filetype == "perl"
exec "call RunPerl()"
elseif &filetype == "python"
exec "call RunPython()"
elseif &filetype == "ruby"
exec "call RunRuby()"
endif
endfunc

" 运行可执行文件
func! RunResult()
exec "w"
if &filetype == "c"
exec "! %<"
elseif &filetype == "cpp"
exec "! %<"
elseif &filetype == "go"
exec "! %<"
elseif &filetype == "haskell"
exec "! %<"
elseif &filetype == "java"
exec "!java %<"
elseif &filetype == "cs"
exec "! %<"
elseif &filetype == "asm"
exec "! %<"
elseif &filetype == "sh"
exec "!sh %<.sh"
elseif &filetype == "lua"
exec "!lua %<.lua"
elseif &filetype == "perl"
exec "!perl %<.pl"
elseif &filetype == "python"
exec "!python %<.py"
elseif &filetype == "ruby"
exec "!ruby %<.rb"
endif
endfunc
